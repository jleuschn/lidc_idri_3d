# -*- coding: utf-8 -*-
"""
Convert labels generated by `lidc_idri_labels.py` to the structure of the
z contiguous parts determined by `lidc_idri_determine_z_contiguous_parts.py`.

The label files from `lidc_idri_labels.py` relate to the dcm files via relative
path and basename. The converted 2D labels relate to the part index and z slice
index by directory and basename: the label file paths for part ``i`` at slice
``j`` start with ``'part_{i:04d}/{j:03d}'``, with suffixes ``'_bboxes.npy'``
and ``'_nodule{k:d}.npy'`` like for the non-converted label files.
"""
import os
import numpy as np
from shutil import copy
from tqdm import tqdm
from lidc_idri_load_z_contiguous_parts import get_num_parts

LABELS_PATH = '/localdata/LIDC-IDRI_labels'
CONTIGUOUS_PARTS_FILE_LISTS_PATH = (
    '/localdata/LIDC-IDRI_z_contiguous_parts/file_lists')
OUTPUT_2D_PATH = '/localdata/LIDC-IDRI_z_contiguous_parts/labels_2d'
os.makedirs(OUTPUT_2D_PATH, exist_ok=True)

# copy slice-wise 2D labels, renaming them to match z contiguous part structure
for i in tqdm(range(get_num_parts(
        contiguous_parts_file_lists_path=CONTIGUOUS_PARTS_FILE_LISTS_PATH))):
    out_path = os.path.join(OUTPUT_2D_PATH, 'part_{:04d}'.format(i))
    os.makedirs(out_path, exist_ok=True)
    with open(os.path.join(CONTIGUOUS_PARTS_FILE_LISTS_PATH,
                            'part_{:04d}.csv'.format(i)), 'r') as f:
        dcm_file_list = f.read().splitlines()
    for j, dcm_file in enumerate(dcm_file_list):
        path = os.path.join(LABELS_PATH, os.path.dirname(dcm_file))
        basename = os.path.splitext(os.path.basename(dcm_file))[0]
        bboxes_filename = os.path.join(path, basename + '_bboxes.npy')
        bboxes = np.zeros(shape=(0, 4))
        if os.path.exists(bboxes_filename):
            bboxes = np.load(bboxes_filename)
        if len(bboxes) > 0:
            bboxes_out_filename = os.path.join(
                out_path, '{:03d}_bboxes.npy'.format(j))
            copy(bboxes_filename, bboxes_out_filename)
            features_filename = os.path.join(path, basename + '_features.json')
            features_out_filename = os.path.join(
                out_path, '{:03d}_features.json'.format(j))
            copy(features_filename, features_out_filename)
            for k in range(len(bboxes)):
                nodule_filename = os.path.join(
                    path, basename + '_nodule{:d}.npy'.format(k))
                nodule_out_filename = os.path.join(
                    out_path, '{:03d}_nodule{:d}.npy'.format(j, k))
                copy(nodule_filename, nodule_out_filename)

# convert slice-wise 2d labels to 3d labels where nodules are connected
# for i in tqdm(range(get_num_parts(
#         contiguous_parts_file_lists_path=CONTIGUOUS_PARTS_FILE_LISTS_PATH))):
#     path = os.path.join(OUTPUT_2D_PATH, 'part_{:04d}'.format(i))
#     with open(os.path.join(CONTIGUOUS_PARTS_FILE_LISTS_PATH,
#                            'part_{:04d}.csv'.format(i)), 'r') as f:
#         dcm_file_list = f.read().splitlines()
#     for j, dcm_file in enumerate(dcm_file_list):
#         bboxes_filename = os.path.join(path, '{:03d}_bboxes.npy'.format(j))
#         # TODO
